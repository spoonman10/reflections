What happens when you initialize a repository? Why do you need to do it?
A file named .git is created, which "marks" the directory as a repository.
This allows for the creation and tracking of commits; those functions are the reason
for initializing a repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area contains files that haven't been committed, but will be when the next commit is created. The staging 
area allows for collecting all files that need to be tracked together, and then tracking that desired group in the repository.

How can you use the staging area to make sure you have one commit per logical change?
If multiple files have undergone changes in working directory, stage one at a time and commit. This
saves the changes to each file in a separate commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Branches are useful anytime different variations of a code are being developed, such as different game modes.
Branches allow for code that has a common foundation to be developed using different approaches as well, by 
having a separate history of changes for each branch, from the point of its creation.

How do the diagrams help you visualize the branch structure?
The diagrams show how the manner in which commits reference their parents prevents visibility of other branches
when using git log.